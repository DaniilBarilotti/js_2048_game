{"version":3,"sources":["scripts/main.js"],"names":["board","fieldOfGame","document","querySelector","button","gameScore","messageStart","messageWin","messageLose","rowsOfCells","points","startGame","innerText","placeBlocks","emptyBlock","i","includes","randomRow","Math","floor","random","randomCol","number","setCells","loseGame","r","c","currentCell","rows","cells","num","classList","value","add","remove","replace","removeEmptyBlocks","row","filter","move","newRow","length","push","moveLeft","moveRight","reverse","moveUp","column","moveDown","saveBoardState","JSON","parse","stringify","isBoardStateChanged","originalBoard","newBoard","addEventListener","e","preventDefault","code"],"mappings":"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","file":"main.f729d9db.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\nconst fieldOfGame = document.querySelector('tbody');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst rowsOfCells = 4;\nlet board;\nlet points = 0;\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startGame();\n});\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  points = 0;\n  gameScore.innerText = points;\n\n  placeBlocks();\n  placeBlocks();\n}\n\nfunction emptyBlock() {\n  for (let i = 0; i < rowsOfCells; i++) {\n    if (board[i].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction placeBlocks() {\n  while (emptyBlock()) {\n    const randomRow = Math.floor((Math.random() * rowsOfCells));\n    const randomCol = Math.floor((Math.random() * rowsOfCells));\n\n    if (board[randomRow][randomCol] === 0) {\n      const number = Math.random() < 0.9 ? 2 : 4;\n\n      board[randomRow][randomCol] = number;\n      break;\n    }\n  }\n\n  setCells();\n}\n\nfunction loseGame() {\n  if (emptyBlock()) {\n    return false;\n  }\n\n  for (let r = 0; r < rowsOfCells; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rowsOfCells - 1; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setCells() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    for (let c = 0; c < rowsOfCells; c++) {\n      const currentCell = fieldOfGame.rows[r].cells[c];\n      const num = board[r][c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction removeEmptyBlocks(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction move(row) {\n  let newRow = removeEmptyBlocks(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      points += newRow[i];\n\n      gameScore.innerText = points;\n    }\n  }\n\n  newRow = removeEmptyBlocks(newRow);\n\n  while (newRow.length < rowsOfCells) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    let row = board[r];\n\n    row = move(row);\n    board[r] = row;\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rowsOfCells; r++) {\n    let row = board[r].reverse();\n\n    row = move(row).reverse();\n    board[r] = row;\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < rowsOfCells; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    column = move(column);\n\n    for (let r = 0; r < rowsOfCells; r++) {\n      board[r][c] = column[r];\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < rowsOfCells; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]].reverse();\n\n    column = move(column).reverse();\n\n    for (let r = 0; r < rowsOfCells; r++) {\n      board[r][c] = column[r];\n    }\n  }\n}\n\nfunction saveBoardState() {\n  return JSON.parse(JSON.stringify(board));\n}\n\nfunction isBoardStateChanged(originalBoard, newBoard) {\n  return JSON.stringify(originalBoard) !== JSON.stringify(newBoard);\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  const originalBoard = saveBoardState();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  if (isBoardStateChanged(originalBoard, board)) {\n    placeBlocks();\n    setCells();\n  }\n});\n"]}